01 - http://luizricardo.org/2014/06/instalando-configurando-e-usando-o-maven-para-gerenciar-suas-dependencias-e-seus-projetos-java/

---------
As of Maven 3 it is not necessary to use environement variables like MAVEN_HOME or M2_HOME anymore. 
The bin path of the Maven installation like /usr/share/maven/ is just enough
---------

- baixar e instalar o maven (m2e - Help > Install New Software)
- mostrar onde configurar o proxy, se necessário settings.xml <proxies> (5 min)
- Navegar até o Local do repositório (5 min)
- Mostrar onde muda o diretório do repositório local... settings.xml <localRepository> (5 min)
- Configurando as variáveis de ambiente M2_HOME (5 min)
- checar versão (5 min)

- configurar maven no eclipse, mudar para o maven baixado, "se necessário" (5 min)
  Se você tem uma versão diferente do Eclipse, use o menu Help > Eclipse Marketplace..., pesquise por M2E e instale o plugin.

- Vá até o menu User Settings

- Criar um projeto Maven simples no Eclipse (5 min)
  Maven > Update Project....

- Adicionar manualmente uma dependência commons-lang3 (5 min)

- criar ClasseDeTeste com o método main (5 min)

- Executando os passos (goals) do Maven (teste, package, install)  
  SuperUtil

- Adicionar manualmente a dependência junit 4
  criar SuperUtilTest
  rodar teste
  Run As > JUnit Test

- rodar maven teste

- Run As > Maven build... Vá até o campo Goals e digite package (mostrar q os teste tbm foram executados)
  Selecione a pasta target e Pressione F5 para atualizá-la.

- Run As > Maven install
  executar o install, isto é, instalar o jar no repositório local

- adicionar dependência desse projeto em outro existente e testar chamadas
	<dependency>
	    <groupId>br.com.starcode</groupId>
	    <artifactId>teste-maven-01</artifactId>
	    <version>0.0.1-SNAPSHOT</version>
	</dependency>

- Analisando as dependências
  Abra novamente o seu arquivo pom.xml e vá até a aba Dependency Hierarchy.



02 - http://www.vogella.com/tutorials/EclipseMaven/article.html

- baixar plugins no eclipse
- configurar on startup
- criar novo projeto usando archetype maven-archetype-quickstart
- criar um método main e testar execução
- 5. Exercise: Create a Java web project in Eclipse using Maven

- empacotar projeto q traz mensaagem, adicionar como dependência e exibir numa tela jsf

- importar projeto maven existente


=============vantagens==================
O Maven centraliza as informações dos projetos no arquivo pom.
Sendo assim, não é preciso configurar várias ferramentas, build scripts, 
servidores e IDEs durante o desenvolvimento. O Maven segue o conceito DRY (Dont Repeat Yourself).

Você não precisa entrar no site de cada biblioteca e framework usado e então fazer 
manualmente o download e adicionar os jars no seu classpath.

Cada dependência pode ter também as suas próprias dependências. 
Elas são chamadas dependências transitivas. O Maven resolve essa árvore de 
dependências e traz tudo o que você precisa.

Em alguns casos, podem haver problemas de conflitos, no caso da árvore de dependências 
incluir versões diferentes de um mesmo artefato. O Maven vem com mecanismos para resolver isso.

Facilidade de compreensão do projeto

Automação
=============================================
Dependendo da complexidade do projeto, pode ser bem complicado criar uma configuração adequada para ao Maven.

Ódio do Maven
A verdade é que existe muita gente que odeia o Maven por ter vivido experiências ruins com ele, 
principalmente no início. 
