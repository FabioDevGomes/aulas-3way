

--------------------------- slides_10_excecões.pdf 

...
 
==================== fim aula 09 t5 ================================

slide 04 - implementar exemplo eclipse, mostrar diferença do e.printStackTrace(); na rastreabilidade (cerca de 25 min)
 
slide 05 - alterar exemplo anterior para mult catch (cerca de 5 min)

slide 06 - implemetar try com recursos (cerca de 12 min)
 cada um em uma classe 

slide 07 - implemetar throw e trhows (cerca de 15 min)
 implementar primeira parte do "Exercício M F - lançar execption.txt"

slide 09 - implemetar criar própria exeção e incluir no ex anterior (cerca de 15 min)
 concluir implementação "Exercício M F - lançar execption.txt"


-------------------------- slides_11_java_collections.pdf


slide 04 - implemetar
 TesteArrayList.java
 
slide 05 - implemetar
 use o map.get(chave) para recuparar os valores

 ContainsKey.java


slide 07 - implemetar
 
slide 09 - implemetar
 crie outros ArrayLists que receba outros tipois de valores

 crie um hashMap com chave do tipo String e valor do tipo Integer e
 adicione alguns elementos nessa coleção de dados

 percorra e exiba seus valores

	Exemplo para percorrer um HashMap()
	for (String chave : mapa.keySet()){


slide 11 - implemetar 

"sort reverse java"

========================================== término ======================

21:00
-------- hasMap
  Implementation: ArrayList implements List Interface while HashMap is an implementation of Map interface.

 - implementas classe Detalhes.java (15 min)


 exercício: crie um método que retorne o nome da pessoa buscando pelo número de CPF
    cadastre as pessoas em um hashMap com chaves sendo o CPF (Long) e os valores sendo o Nome (não pode começar com 0)
       (20 min)

 se não existir a pessoa cadastrada exibir mensagem "pessoa não encontrada nos registros do hashMap"



-------------------------- slides_12_tipos_genericos.pdf


- implementar TesteGenerics

	v1.0

	imlemente a classe "Pessoa" que tem o método não abstrato, pagarImposto()
	essa classe será uma super classe

	implemente uma subclasse de "Pessoa", com o nome "PessoaJuridica"
	sobrescrevendo pagarImposto()

	implemente a classe "TesteGenerics" com o método genérico abaixo:

	public void addPessoa(List<PessoaJuridica> pessoasJ){
		
		(não mostrar essa implementação)
		//for(PessoaJuridica pessoa : pessoasJ){
		//	pessoa.pagarImposto();
		//}
	}

	percorra a lista chamado o método "pagarImposto()" de todos
	os objetos na lista


	v 1.2

	classe PessoaFisica extende Pessoa sobrescrevendo pagarImposto()
	
	Como adicionar objetos do tipo PessoaFisica e PessoaJuridica no mésmo método?

 	public void addAnimal(List<? extends Felino> animais){
		
		for(Felino bicho : animais){
			bicho.fazerRuido();
			
		}
	}


------------------------- java_oo_slides_13_lendo_e_escrevendo_arquivos_pages_deleted.pdf

- slide 05
 implementar escrita

- slide 05
implementar leitura arquivo

- slide 07
 antes, mostrar novas classes para escrita BufferedOutputStreamExample.java

 

- slide 09
 implementar NIO2 do Eclipse
 Dividir parte de escrita e leitura em métodos


- leia um texto qualquer do teclado e grave-o em um arquivo
- leia um texto em um arquivo e grave-o em outro; divida a parte de leitura em um método e a parte de escrita em outro











